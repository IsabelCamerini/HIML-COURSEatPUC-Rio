{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NZZDmZGC4Zam"
      },
      "source": [
        "## :  Import Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MA9b83NEJq7i"
      },
      "outputs": [],
      "source": [
        "# function ClickConnect() {\n",
        "#   console.log('Working')\n",
        "#   document\n",
        "#     .querySelector('#top-toolbar > colab-connect-button')\n",
        "#     .shadowRoot.querySelector('#connect')\n",
        "#     .click()\n",
        "# }\n",
        "\n",
        "# setInterval(ClickConnect, 60000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JmvwPpY22TaG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4cfd27a-7ba5-46cc-fb28-5386a03fe04e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting statsmodels==0.13.2\n",
            "  Downloading statsmodels-0.13.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (9.8 MB)\n",
            "\u001b[K     |████████████████████████████████| 9.8 MB 11.6 MB/s \n",
            "\u001b[?25hRequirement already satisfied: pandas>=0.25 in /usr/local/lib/python3.7/dist-packages (from statsmodels==0.13.2) (1.3.5)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.7/dist-packages (from statsmodels==0.13.2) (21.3)\n",
            "Requirement already satisfied: patsy>=0.5.2 in /usr/local/lib/python3.7/dist-packages (from statsmodels==0.13.2) (0.5.2)\n",
            "Requirement already satisfied: scipy>=1.3 in /usr/local/lib/python3.7/dist-packages (from statsmodels==0.13.2) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from statsmodels==0.13.2) (1.21.6)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=21.3->statsmodels==0.13.2) (3.0.9)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25->statsmodels==0.13.2) (2022.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25->statsmodels==0.13.2) (2.8.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from patsy>=0.5.2->statsmodels==0.13.2) (1.15.0)\n",
            "Installing collected packages: statsmodels\n",
            "  Attempting uninstall: statsmodels\n",
            "    Found existing installation: statsmodels 0.10.2\n",
            "    Uninstalling statsmodels-0.10.2:\n",
            "      Successfully uninstalled statsmodels-0.10.2\n",
            "Successfully installed statsmodels-0.13.2\n"
          ]
        }
      ],
      "source": [
        "! pip install statsmodels==0.13.2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ru-HAQce3LPe"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib \n",
        "import scipy\n",
        "import sklearn\n",
        "import statsmodels\n",
        "import seaborn\n",
        "import pydot\n",
        "import os\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "import scipy.io as sio\n",
        "import numpy as np\n",
        "from os import getcwd\n",
        "from os.path import join \n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "from statsmodels.tsa.ar_model import AutoReg \n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import svm\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "\n",
        "from scipy import stats\n",
        "from scipy.stats.stats import mode\n",
        "from scipy.stats import uniform\n",
        "from sklearn.model_selection import (train_test_split, RepeatedKFold,RandomizedSearchCV)\n",
        "\n",
        "from sklearn.linear_model import Ridge\n",
        "\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "# from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "# from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.datasets import make_regression\n",
        "\n",
        "import pickle\n",
        "\n",
        "\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.model_selection import train_test_split\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "from sklearn.manifold import TSNE\n",
        "\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.metrics import f1_score\n",
        "from sklearn.svm import OneClassSVM\n",
        "\n",
        "from sklearn.linear_model import RidgeClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "\n",
        "\n",
        "from pandas.core.frame import DataFrame\n",
        "\n",
        "import seaborn as sns\n",
        "\n",
        "from os import listdir\n",
        "from os.path import isfile, join\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z-wvXu1Z2Pra",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8afa4ffa-0099-4db1-9a9a-0504c103985e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I9jeNv5l2umg"
      },
      "outputs": [],
      "source": [
        "os.chdir('drive/MyDrive/HIML/Trab_Final/') \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q2SZ_gl45xC7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "22387d47-0f9e-48d5-df2d-c13fb48a92d9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cumulativevar.png  Isabel_Tiago_Proj.ipynb        plot_cement.png\n",
            "\u001b[0m\u001b[01;34mdata\u001b[0m/              Isabel_Tiago_Proj_Tiago.ipynb  plot_labels.png\n",
            "def.png            plot_13_probes.png             plot_test.png\n"
          ]
        }
      ],
      "source": [
        "ls"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "v7z93nHK3cWo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "beb9d0ba-9dcd-45da-a0c7-7bc3171a27e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(130, 19500) [[-1.75169635e-04  1.21950000e-03 -4.49169212e-04 ... -1.23735000e-02\n",
            "  -1.13955000e-02 -3.65000000e-05]\n",
            " [-1.64000000e-04  3.01366670e-04  2.78500000e-04 ... -1.37855000e-02\n",
            "  -1.21895000e-02  1.56100000e-03]\n",
            " [-4.38000000e-04 -2.28550000e-03  3.56000000e-04 ... -1.07270000e-02\n",
            "  -1.22870000e-02 -5.06050000e-03]\n",
            " ...\n",
            " [ 3.13921185e-04 -3.47500000e-04 -1.56500000e-04 ...  1.65050000e-03\n",
            "  -2.18335550e-05 -4.69000000e-04]\n",
            " [-7.15500000e-04 -4.05000000e-05 -4.54430650e-05 ...  8.60000000e-05\n",
            "   2.11500000e-04  4.88736781e-04]\n",
            " [ 4.05000000e-05 -1.30000000e-04 -1.26500000e-04 ... -4.98350000e-03\n",
            "   2.52250000e-03  3.25800000e-03]]\n"
          ]
        }
      ],
      "source": [
        "input_files = [f for f in listdir('data/') if isfile(join('data/',f))\n",
        "               and f.endswith('h1.csv') # to change Hidrophone, chande de h + number of hidrophone\n",
        "               and 'sur_pos' not in f \n",
        "               and 'time' not in f]\n",
        "input_files\n",
        "\n",
        "\n",
        "label = pd.read_csv(r'data/y.csv') \n",
        "\n",
        "data_hp1 = np.zeros((len(input_files),19500))\n",
        "\n",
        "i = 0\n",
        "\n",
        "for name in input_files:\n",
        "    aux = np.genfromtxt('data/'+name, delimiter=',', skip_header = 1)\n",
        "    aux = aux.transpose()\n",
        "    x  = aux.reshape((1,-1))\n",
        "    data_hp1[i,:] = x\n",
        "    i = i+1\n",
        "\n",
        "print(data_hp1.shape, data_hp1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gHT7bo3s2hAi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "19986afe-5ec6-4193-9276-a8bce02e3c1d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(130, 19500) [[-8.54500000e-04  1.39550000e-03  6.75000000e-05 ...  6.53000000e-04\n",
            "  -7.42400000e-03 -7.74250000e-03]\n",
            " [ 5.60500000e-04  3.32000000e-04  4.46500000e-04 ...  5.03900000e-03\n",
            "   1.59050000e-03 -3.83150000e-03]\n",
            " [ 3.93140657e-05 -1.15513805e-04  3.83599020e-04 ... -1.37350000e-03\n",
            "  -7.24250000e-03 -5.57200000e-03]\n",
            " ...\n",
            " [ 1.87000000e-04 -1.32500000e-04 -2.85950170e-04 ... -6.61000000e-04\n",
            "  -9.51191550e-05  8.44500000e-04]\n",
            " [ 3.02469430e-04 -1.60485785e-04 -3.09000000e-04 ...  3.39500000e-04\n",
            "   4.85850000e-03  3.01650000e-03]\n",
            " [-2.86000000e-04  5.05000000e-05  7.02000000e-04 ...  1.42650000e-03\n",
            "   7.86500000e-04 -8.54000000e-04]]\n"
          ]
        }
      ],
      "source": [
        "input_files = [f for f in listdir('data/') if isfile(join('data/',f))\n",
        "               and f.endswith('h2.csv') # to change Hidrophone, chande de h + number of hidrophone\n",
        "               and 'sur_pos' not in f \n",
        "               and 'time' not in f]\n",
        "input_files\n",
        "\n",
        "data_hp2 = np.zeros((len(input_files),19500))\n",
        "label = pd.read_csv(r'data/y.csv') \n",
        "\n",
        "i = 0\n",
        "\n",
        "for name in input_files:\n",
        "    aux = np.genfromtxt('data/'+name, delimiter=',', skip_header = 1)\n",
        "    aux = aux.transpose()\n",
        "    x  = aux.reshape((1,-1))\n",
        "    data_hp2[i,:] = x\n",
        "\n",
        "    \n",
        "    i = i+1\n",
        "\n",
        "print(data_hp2.shape, data_hp2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EM_FVRCU5kSn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "355942df-0353-43a9-bdb1-b685d8075d3c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(130, 19500) [[-2.18000000e-04 -6.60881300e-05 -7.10000000e-05 ... -5.60000000e-05\n",
            "   1.17090000e-02  1.46750000e-02]\n",
            " [ 1.82152255e-04 -1.37700000e-03 -4.93019515e-04 ... -9.76300000e-03\n",
            "   6.42000000e-03  1.46650000e-02]\n",
            " [ 3.44500000e-04  2.00000000e-06  1.41500000e-04 ... -1.07970000e-02\n",
            "   2.96900000e-03  1.25930000e-02]\n",
            " ...\n",
            " [ 2.65000000e-05 -9.07132000e-06 -1.37417550e-04 ...  2.05750000e-03\n",
            "  -1.37750000e-03 -2.15850000e-03]\n",
            " [-3.56500000e-04 -1.45862775e-04 -1.00000000e-06 ...  3.76746620e-04\n",
            "   1.19186350e-05 -9.10500000e-04]\n",
            " [-4.93000000e-04 -4.69500000e-04 -2.58000000e-04 ... -3.09400000e-03\n",
            "   7.09000000e-04 -9.17375800e-05]]\n"
          ]
        }
      ],
      "source": [
        "input_files = [f for f in listdir('data/') if isfile(join('data/',f))\n",
        "               and f.endswith('h3.csv') # to change Hidrophone -> h + hidrophone number\n",
        "               and 'sur_pos' not in f \n",
        "               and 'time' not in f]\n",
        "input_files\n",
        "\n",
        "data_hp3 = np.zeros((len(input_files),19500))\n",
        "label = pd.read_csv(r'data/y.csv') \n",
        "\n",
        "i = 0\n",
        "\n",
        "for name in input_files:\n",
        "    aux = np.genfromtxt('data/'+name, delimiter=',', skip_header = 1)\n",
        "    aux = aux.transpose()\n",
        "    x  = aux.reshape((1,-1))\n",
        "    data_hp3[i,:] = x\n",
        "\n",
        "    \n",
        "    i = i+1\n",
        "\n",
        "print(data_hp3.shape, data_hp3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K3gMZhVq67f_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "807dde1c-a244-482b-f3d5-cdab245a8bab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(130, 19500) [[-2.18000000e-04 -6.60881300e-05 -7.10000000e-05 ... -5.60000000e-05\n",
            "   1.17090000e-02  1.46750000e-02]\n",
            " [ 1.82152255e-04 -1.37700000e-03 -4.93019515e-04 ... -9.76300000e-03\n",
            "   6.42000000e-03  1.46650000e-02]\n",
            " [ 3.44500000e-04  2.00000000e-06  1.41500000e-04 ... -1.07970000e-02\n",
            "   2.96900000e-03  1.25930000e-02]\n",
            " ...\n",
            " [ 2.65000000e-05 -9.07132000e-06 -1.37417550e-04 ...  2.05750000e-03\n",
            "  -1.37750000e-03 -2.15850000e-03]\n",
            " [-3.56500000e-04 -1.45862775e-04 -1.00000000e-06 ...  3.76746620e-04\n",
            "   1.19186350e-05 -9.10500000e-04]\n",
            " [-4.93000000e-04 -4.69500000e-04 -2.58000000e-04 ... -3.09400000e-03\n",
            "   7.09000000e-04 -9.17375800e-05]]\n"
          ]
        }
      ],
      "source": [
        "input_files = [f for f in listdir('data/') if isfile(join('data/',f))\n",
        "               and f.endswith('h3.csv') # to change Hidrophone -> h + hidrophone number\n",
        "               and 'sur_pos' not in f \n",
        "               and 'time' not in f]\n",
        "input_files\n",
        "\n",
        "data_hp4 = np.zeros((len(input_files),19500))\n",
        "\n",
        "i = 0\n",
        "\n",
        "for name in input_files:\n",
        "    aux = np.genfromtxt('data/'+name, delimiter=',', skip_header = 1)\n",
        "    aux = aux.transpose()\n",
        "    x  = aux.reshape((1,-1))\n",
        "    data_hp4[i,:] = x\n",
        "\n",
        "    \n",
        "    i = i+1\n",
        "\n",
        "print(data_hp4.shape, data_hp4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bMHwz0VF3t9X"
      },
      "outputs": [],
      "source": [
        "data = (data_hp1+data_hp2) / 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mYBF8cQi74XA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d992749a-8780-4bb6-ae12-070315271c7d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(130, 19500)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jWOfdABHAVhX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "f1a34109-1523-456e-aa2a-cadf882d44ee"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     label\n",
              "0    CE-E1\n",
              "1    CE-E1\n",
              "2    CE-E1\n",
              "3    CE-E1\n",
              "4    CE-E1\n",
              "..     ...\n",
              "125     NE\n",
              "126     NE\n",
              "127     NE\n",
              "128     NE\n",
              "129     NE\n",
              "\n",
              "[130 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0814ba6-f121-4d9b-a148-b56c953fb71b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>130 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0814ba6-f121-4d9b-a148-b56c953fb71b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e0814ba6-f121-4d9b-a148-b56c953fb71b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e0814ba6-f121-4d9b-a148-b56c953fb71b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "label"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lk4aof4BAjNG"
      },
      "source": [
        "## : Início do processamento"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "32eH_sH1vi0G"
      },
      "outputs": [],
      "source": [
        "#input_files"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e-gKqynj2hAj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "9740848e-4814-41bb-f360-73bdb71f4e39"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "Ch1 = data[1,:].reshape((13,-1))\n",
        "\n",
        "Ts = 3.125 * 1e-3 # sampling time\n",
        "# time = pd.read_csv(r'data/sinc50kHz_casing_9_CE_samp_1_time.csv')\n",
        "time = pd.read_csv(r'data/sinc50kHz_casing_9_CE_samp_1_time.csv') #* Ts\n",
        "pos = pd.read_csv(r'data/sinc50kHz_casing_9_CE_samp_1_sur_pos.csv')\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "for case in range(0,13):\n",
        "    ax.plot(time.values,Ch1[case,:] + pos.values[case][0], 'k')\n",
        "\n",
        "plt.savefig('plot_13_probes.png', dpi=400, format='png')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qaHk1svV8t_N"
      },
      "source": [
        "## : feature extraction PCA \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ufLv8LjkXVBR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "53f5ad47-f224-46b7-d0fe-2fe608cba8cd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "matrix X.shape:  (130, 36) \n",
            " X_PCA: [[ 0.21886592 -1.78884879 -1.27256746 ...  0.00722241  0.04083163\n",
            "   0.02136022]\n",
            " [ 0.16828967 -1.7078949  -1.32297583 ... -0.03427301  0.04609496\n",
            "   0.09341049]\n",
            " [ 0.22565699 -1.76438734 -1.23779489 ...  0.00495081 -0.06380199\n",
            "  -0.05281487]\n",
            " ...\n",
            " [-0.2370953  -0.11015689  0.16971736 ... -0.23198514  0.07313665\n",
            "   0.18884941]\n",
            " [-0.41555697 -0.28264606  0.05466732 ...  0.03531389 -0.00402734\n",
            "  -0.11230222]\n",
            " [-0.34193018 -0.23908679  0.0691217  ... -0.00327776  0.03081967\n",
            "   0.02857187]]\n"
          ]
        }
      ],
      "source": [
        "pca = PCA(n_components=.95)\n",
        "X_pca = pca.fit_transform(data)\n",
        "\n",
        "print('matrix X.shape: ',X_pca.shape,'\\n X_PCA:', X_pca)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BrWey38AN301",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1774d02b-b6d2-418f-c243-0c795ea4d449"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.23243551 0.14423704 0.12141218 0.10259414 0.04574463 0.03778848\n",
            " 0.0272831  0.02566755 0.02252064 0.02196183 0.01843015 0.01329638\n",
            " 0.01165075 0.01046892 0.00970418 0.00881295 0.00855738 0.00800486\n",
            " 0.00740136 0.00680574 0.00665977 0.00646571 0.00605974 0.00508857\n",
            " 0.00463352 0.00441332 0.00418294 0.00390227 0.00378177 0.00360735\n",
            " 0.00352445 0.0033565  0.00316149 0.0028742  0.00279659 0.00261764] [10.0781312   7.93902513  7.28383155  6.69560851  4.47093963  4.06357664\n",
            "  3.45283322  3.34904471  3.13703355  3.09786894  2.83787473  2.41043514\n",
            "  2.25634568  2.13884653  2.05924549  1.96240872  1.93374442  1.87027592\n",
            "  1.79839292  1.72451341  1.70591902  1.68088123  1.62725542  1.49116817\n",
            "  1.42293262  1.38871001  1.35197712  1.30583255  1.28551217  1.2555174\n",
            "  1.24100803  1.21107789  1.17536949  1.12069368  1.10545998  1.06950626]\n"
          ]
        }
      ],
      "source": [
        "print(pca.explained_variance_ratio_ , pca.singular_values_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TbsWKbP617xk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "abc76286-ac74-4df1-9f03-a251a7bfbf6d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
        "plt.xlabel('Principal Coomponent no.')\n",
        "plt.ylabel('cumulative explained variance');\n",
        "plt.savefig('cumulativevar.png', dpi=400, format='png')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vDkLEmgdoNqb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "outputId": "e0162760-2bce-4fc3-9305-a15105cd8411"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            0         1         2         3         4         5         6  \\\n",
              "0    0.218866 -1.788849 -1.272567  1.286013 -0.025384  0.110330 -0.078616   \n",
              "1    0.168290 -1.707895 -1.322976  1.308286  0.012410  0.029317 -0.337297   \n",
              "2    0.225657 -1.764387 -1.237795  1.317395 -0.062924  0.095478 -0.104374   \n",
              "3    0.250648 -1.779244 -1.266482  1.304862 -0.009416  0.063917 -0.149459   \n",
              "4    0.150545 -1.692308 -1.127476  1.253241 -0.113124  0.077051  0.052341   \n",
              "..        ...       ...       ...       ...       ...       ...       ...   \n",
              "125 -0.243562 -0.172117  0.016343 -0.517160 -0.395717  1.134862 -0.063609   \n",
              "126 -0.298643 -0.124896  0.047392 -0.627602 -0.148419  1.168864  0.219554   \n",
              "127 -0.237095 -0.110157  0.169717 -0.472418 -0.356296  0.251117  0.061189   \n",
              "128 -0.415557 -0.282646  0.054667 -0.699325 -0.327229  1.697663 -0.316652   \n",
              "129 -0.341930 -0.239087  0.069122 -0.634052 -0.296480  1.558553  0.000866   \n",
              "\n",
              "            7         8         9  ...        27        28        29  \\\n",
              "0   -0.073011 -0.060965  0.020220  ...  0.034464 -0.048834  0.071760   \n",
              "1   -0.240902 -0.234894 -0.105893  ... -0.045248 -0.050391 -0.037330   \n",
              "2   -0.090659 -0.122462 -0.068372  ...  0.062345  0.026197 -0.019397   \n",
              "3   -0.068594 -0.085247 -0.066582  ... -0.022735  0.017353  0.026853   \n",
              "4    0.008866  0.014841 -0.077939  ...  0.037335  0.065705 -0.018302   \n",
              "..        ...       ...       ...  ...       ...       ...       ...   \n",
              "125 -0.102538 -0.213893  0.407456  ...  0.076614 -0.110156  0.055485   \n",
              "126  0.121235  0.003090  0.412120  ... -0.151628  0.101904 -0.058364   \n",
              "127  0.012236 -0.005983  0.086856  ...  0.077621  0.080538  0.113152   \n",
              "128 -0.262862 -0.029602 -0.235446  ... -0.122264  0.073279 -0.095211   \n",
              "129  0.017512  0.126786 -0.092473  ... -0.114700 -0.149630 -0.004352   \n",
              "\n",
              "           30        31        32        33        34        35  label  \n",
              "0   -0.017183 -0.005208  0.031162  0.007222  0.040832  0.021360  CE-E1  \n",
              "1    0.070267  0.025179  0.026804 -0.034273  0.046095  0.093410  CE-E1  \n",
              "2    0.015576 -0.024753 -0.077575  0.004951 -0.063802 -0.052815  CE-E1  \n",
              "3   -0.024080  0.022302 -0.014098  0.004972  0.003337  0.032484  CE-E1  \n",
              "4   -0.070278 -0.029900 -0.112453  0.025672 -0.124504 -0.128077  CE-E1  \n",
              "..        ...       ...       ...       ...       ...       ...    ...  \n",
              "125  0.024799 -0.005150  0.056961  0.046080 -0.001202  0.028711     NE  \n",
              "126  0.168007  0.009866  0.033027 -0.163595  0.057479  0.032558     NE  \n",
              "127  0.292894  0.141428 -0.114810 -0.231985  0.073137  0.188849     NE  \n",
              "128 -0.151736  0.018817 -0.090885  0.035314 -0.004027 -0.112302     NE  \n",
              "129 -0.105904  0.055064  0.075327 -0.003278  0.030820  0.028572     NE  \n",
              "\n",
              "[130 rows x 37 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9372be3f-17b9-4a5a-9e51-1473957a0106\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>27</th>\n",
              "      <th>28</th>\n",
              "      <th>29</th>\n",
              "      <th>30</th>\n",
              "      <th>31</th>\n",
              "      <th>32</th>\n",
              "      <th>33</th>\n",
              "      <th>34</th>\n",
              "      <th>35</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.218866</td>\n",
              "      <td>-1.788849</td>\n",
              "      <td>-1.272567</td>\n",
              "      <td>1.286013</td>\n",
              "      <td>-0.025384</td>\n",
              "      <td>0.110330</td>\n",
              "      <td>-0.078616</td>\n",
              "      <td>-0.073011</td>\n",
              "      <td>-0.060965</td>\n",
              "      <td>0.020220</td>\n",
              "      <td>...</td>\n",
              "      <td>0.034464</td>\n",
              "      <td>-0.048834</td>\n",
              "      <td>0.071760</td>\n",
              "      <td>-0.017183</td>\n",
              "      <td>-0.005208</td>\n",
              "      <td>0.031162</td>\n",
              "      <td>0.007222</td>\n",
              "      <td>0.040832</td>\n",
              "      <td>0.021360</td>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.168290</td>\n",
              "      <td>-1.707895</td>\n",
              "      <td>-1.322976</td>\n",
              "      <td>1.308286</td>\n",
              "      <td>0.012410</td>\n",
              "      <td>0.029317</td>\n",
              "      <td>-0.337297</td>\n",
              "      <td>-0.240902</td>\n",
              "      <td>-0.234894</td>\n",
              "      <td>-0.105893</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.045248</td>\n",
              "      <td>-0.050391</td>\n",
              "      <td>-0.037330</td>\n",
              "      <td>0.070267</td>\n",
              "      <td>0.025179</td>\n",
              "      <td>0.026804</td>\n",
              "      <td>-0.034273</td>\n",
              "      <td>0.046095</td>\n",
              "      <td>0.093410</td>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.225657</td>\n",
              "      <td>-1.764387</td>\n",
              "      <td>-1.237795</td>\n",
              "      <td>1.317395</td>\n",
              "      <td>-0.062924</td>\n",
              "      <td>0.095478</td>\n",
              "      <td>-0.104374</td>\n",
              "      <td>-0.090659</td>\n",
              "      <td>-0.122462</td>\n",
              "      <td>-0.068372</td>\n",
              "      <td>...</td>\n",
              "      <td>0.062345</td>\n",
              "      <td>0.026197</td>\n",
              "      <td>-0.019397</td>\n",
              "      <td>0.015576</td>\n",
              "      <td>-0.024753</td>\n",
              "      <td>-0.077575</td>\n",
              "      <td>0.004951</td>\n",
              "      <td>-0.063802</td>\n",
              "      <td>-0.052815</td>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.250648</td>\n",
              "      <td>-1.779244</td>\n",
              "      <td>-1.266482</td>\n",
              "      <td>1.304862</td>\n",
              "      <td>-0.009416</td>\n",
              "      <td>0.063917</td>\n",
              "      <td>-0.149459</td>\n",
              "      <td>-0.068594</td>\n",
              "      <td>-0.085247</td>\n",
              "      <td>-0.066582</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.022735</td>\n",
              "      <td>0.017353</td>\n",
              "      <td>0.026853</td>\n",
              "      <td>-0.024080</td>\n",
              "      <td>0.022302</td>\n",
              "      <td>-0.014098</td>\n",
              "      <td>0.004972</td>\n",
              "      <td>0.003337</td>\n",
              "      <td>0.032484</td>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.150545</td>\n",
              "      <td>-1.692308</td>\n",
              "      <td>-1.127476</td>\n",
              "      <td>1.253241</td>\n",
              "      <td>-0.113124</td>\n",
              "      <td>0.077051</td>\n",
              "      <td>0.052341</td>\n",
              "      <td>0.008866</td>\n",
              "      <td>0.014841</td>\n",
              "      <td>-0.077939</td>\n",
              "      <td>...</td>\n",
              "      <td>0.037335</td>\n",
              "      <td>0.065705</td>\n",
              "      <td>-0.018302</td>\n",
              "      <td>-0.070278</td>\n",
              "      <td>-0.029900</td>\n",
              "      <td>-0.112453</td>\n",
              "      <td>0.025672</td>\n",
              "      <td>-0.124504</td>\n",
              "      <td>-0.128077</td>\n",
              "      <td>CE-E1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>-0.243562</td>\n",
              "      <td>-0.172117</td>\n",
              "      <td>0.016343</td>\n",
              "      <td>-0.517160</td>\n",
              "      <td>-0.395717</td>\n",
              "      <td>1.134862</td>\n",
              "      <td>-0.063609</td>\n",
              "      <td>-0.102538</td>\n",
              "      <td>-0.213893</td>\n",
              "      <td>0.407456</td>\n",
              "      <td>...</td>\n",
              "      <td>0.076614</td>\n",
              "      <td>-0.110156</td>\n",
              "      <td>0.055485</td>\n",
              "      <td>0.024799</td>\n",
              "      <td>-0.005150</td>\n",
              "      <td>0.056961</td>\n",
              "      <td>0.046080</td>\n",
              "      <td>-0.001202</td>\n",
              "      <td>0.028711</td>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>-0.298643</td>\n",
              "      <td>-0.124896</td>\n",
              "      <td>0.047392</td>\n",
              "      <td>-0.627602</td>\n",
              "      <td>-0.148419</td>\n",
              "      <td>1.168864</td>\n",
              "      <td>0.219554</td>\n",
              "      <td>0.121235</td>\n",
              "      <td>0.003090</td>\n",
              "      <td>0.412120</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.151628</td>\n",
              "      <td>0.101904</td>\n",
              "      <td>-0.058364</td>\n",
              "      <td>0.168007</td>\n",
              "      <td>0.009866</td>\n",
              "      <td>0.033027</td>\n",
              "      <td>-0.163595</td>\n",
              "      <td>0.057479</td>\n",
              "      <td>0.032558</td>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>-0.237095</td>\n",
              "      <td>-0.110157</td>\n",
              "      <td>0.169717</td>\n",
              "      <td>-0.472418</td>\n",
              "      <td>-0.356296</td>\n",
              "      <td>0.251117</td>\n",
              "      <td>0.061189</td>\n",
              "      <td>0.012236</td>\n",
              "      <td>-0.005983</td>\n",
              "      <td>0.086856</td>\n",
              "      <td>...</td>\n",
              "      <td>0.077621</td>\n",
              "      <td>0.080538</td>\n",
              "      <td>0.113152</td>\n",
              "      <td>0.292894</td>\n",
              "      <td>0.141428</td>\n",
              "      <td>-0.114810</td>\n",
              "      <td>-0.231985</td>\n",
              "      <td>0.073137</td>\n",
              "      <td>0.188849</td>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>-0.415557</td>\n",
              "      <td>-0.282646</td>\n",
              "      <td>0.054667</td>\n",
              "      <td>-0.699325</td>\n",
              "      <td>-0.327229</td>\n",
              "      <td>1.697663</td>\n",
              "      <td>-0.316652</td>\n",
              "      <td>-0.262862</td>\n",
              "      <td>-0.029602</td>\n",
              "      <td>-0.235446</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.122264</td>\n",
              "      <td>0.073279</td>\n",
              "      <td>-0.095211</td>\n",
              "      <td>-0.151736</td>\n",
              "      <td>0.018817</td>\n",
              "      <td>-0.090885</td>\n",
              "      <td>0.035314</td>\n",
              "      <td>-0.004027</td>\n",
              "      <td>-0.112302</td>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>-0.341930</td>\n",
              "      <td>-0.239087</td>\n",
              "      <td>0.069122</td>\n",
              "      <td>-0.634052</td>\n",
              "      <td>-0.296480</td>\n",
              "      <td>1.558553</td>\n",
              "      <td>0.000866</td>\n",
              "      <td>0.017512</td>\n",
              "      <td>0.126786</td>\n",
              "      <td>-0.092473</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.114700</td>\n",
              "      <td>-0.149630</td>\n",
              "      <td>-0.004352</td>\n",
              "      <td>-0.105904</td>\n",
              "      <td>0.055064</td>\n",
              "      <td>0.075327</td>\n",
              "      <td>-0.003278</td>\n",
              "      <td>0.030820</td>\n",
              "      <td>0.028572</td>\n",
              "      <td>NE</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>130 rows × 37 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9372be3f-17b9-4a5a-9e51-1473957a0106')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9372be3f-17b9-4a5a-9e51-1473957a0106 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9372be3f-17b9-4a5a-9e51-1473957a0106');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "df = pd.DataFrame(X_pca)\n",
        "# conc = pd.concat([df,label],axis=1,ignore_index=True)\n",
        "# conc\n",
        "\n",
        "df['label']=label\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xAkOQn4kutT5"
      },
      "outputs": [],
      "source": [
        "label_2 = {}\n",
        "label_3 = {}\n",
        "col_label = 36\n",
        "\n",
        "for i in range(0,130):\n",
        "  if df.iloc[i,col_label] == 'CE-E1' or df.iloc[i,col_label] == 'CH-E1' or df.iloc[i,col_label] == 'CL-E1' or df.iloc[i,col_label] == 'E1':\n",
        "    label_2[i] = df.iloc[i,col_label][-2:]\n",
        "    if len(df.iloc[i,col_label]) == 2:\n",
        "      label_3[i] = 'F'\n",
        "    else: \n",
        "      label_3[i] = df.iloc[i,col_label][0:2]\n",
        "\n",
        "  elif df.iloc[i,col_label] == 'CE-E2' or df.iloc[i,col_label] == 'CH-E2' or df.iloc[i,col_label] == 'CL-E2' or df.iloc[i,col_label] == 'E2':\n",
        "    label_2[i] = df.iloc[i,col_label][-2:]\n",
        "    if len(df.iloc[i,col_label]) == 2:\n",
        "      label_3[i] = 'F'\n",
        "    else: \n",
        "      label_3[i] = df.iloc[i,col_label][0:2]\n",
        "  \n",
        "  elif df.iloc[i,col_label] == 'CE' or df.iloc[i,col_label] == 'CH-NE' or df.iloc[i,col_label] == 'CL-NE' or df.iloc[i,col_label] == 'NE':\n",
        "    label_2[i] = df.iloc[i,col_label][-2:]\n",
        "    if len(df.iloc[i,col_label]) == 2:\n",
        "      label_3[i] = 'F'\n",
        "    else: \n",
        "      label_3[i] = df.iloc[i,col_label][0:2]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XNcgJBgC2FHy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aa8efa2d-b911-4e33-cbcc-89c8e434ffac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "130"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "len(label_3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lseu8qbcwjnq"
      },
      "outputs": [],
      "source": [
        "#  label_2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h3EMrsxDqTOs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "outputId": "b7f687ad-93d1-4486-9a09-8eea65797275"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            0         1         2         3         4         5         6  \\\n",
              "0    0.218866 -1.788849 -1.272567  1.286013 -0.025384  0.110330 -0.078616   \n",
              "1    0.168290 -1.707895 -1.322976  1.308286  0.012410  0.029317 -0.337297   \n",
              "2    0.225657 -1.764387 -1.237795  1.317395 -0.062924  0.095478 -0.104374   \n",
              "3    0.250648 -1.779244 -1.266482  1.304862 -0.009416  0.063917 -0.149459   \n",
              "4    0.150545 -1.692308 -1.127476  1.253241 -0.113124  0.077051  0.052341   \n",
              "..        ...       ...       ...       ...       ...       ...       ...   \n",
              "125 -0.243562 -0.172117  0.016343 -0.517160 -0.395717  1.134862 -0.063609   \n",
              "126 -0.298643 -0.124896  0.047392 -0.627602 -0.148419  1.168864  0.219554   \n",
              "127 -0.237095 -0.110157  0.169717 -0.472418 -0.356296  0.251117  0.061189   \n",
              "128 -0.415557 -0.282646  0.054667 -0.699325 -0.327229  1.697663 -0.316652   \n",
              "129 -0.341930 -0.239087  0.069122 -0.634052 -0.296480  1.558553  0.000866   \n",
              "\n",
              "            7         8         9  ...        29        30        31  \\\n",
              "0   -0.073011 -0.060965  0.020220  ...  0.071760 -0.017183 -0.005208   \n",
              "1   -0.240902 -0.234894 -0.105893  ... -0.037330  0.070267  0.025179   \n",
              "2   -0.090659 -0.122462 -0.068372  ... -0.019397  0.015576 -0.024753   \n",
              "3   -0.068594 -0.085247 -0.066582  ...  0.026853 -0.024080  0.022302   \n",
              "4    0.008866  0.014841 -0.077939  ... -0.018302 -0.070278 -0.029900   \n",
              "..        ...       ...       ...  ...       ...       ...       ...   \n",
              "125 -0.102538 -0.213893  0.407456  ...  0.055485  0.024799 -0.005150   \n",
              "126  0.121235  0.003090  0.412120  ... -0.058364  0.168007  0.009866   \n",
              "127  0.012236 -0.005983  0.086856  ...  0.113152  0.292894  0.141428   \n",
              "128 -0.262862 -0.029602 -0.235446  ... -0.095211 -0.151736  0.018817   \n",
              "129  0.017512  0.126786 -0.092473  ... -0.004352 -0.105904  0.055064   \n",
              "\n",
              "           32        33        34        35  label  def  cement  \n",
              "0    0.031162  0.007222  0.040832  0.021360  CE-E1   E1      CE  \n",
              "1    0.026804 -0.034273  0.046095  0.093410  CE-E1   E1      CE  \n",
              "2   -0.077575  0.004951 -0.063802 -0.052815  CE-E1   E1      CE  \n",
              "3   -0.014098  0.004972  0.003337  0.032484  CE-E1   E1      CE  \n",
              "4   -0.112453  0.025672 -0.124504 -0.128077  CE-E1   E1      CE  \n",
              "..        ...       ...       ...       ...    ...  ...     ...  \n",
              "125  0.056961  0.046080 -0.001202  0.028711     NE   NE       F  \n",
              "126  0.033027 -0.163595  0.057479  0.032558     NE   NE       F  \n",
              "127 -0.114810 -0.231985  0.073137  0.188849     NE   NE       F  \n",
              "128 -0.090885  0.035314 -0.004027 -0.112302     NE   NE       F  \n",
              "129  0.075327 -0.003278  0.030820  0.028572     NE   NE       F  \n",
              "\n",
              "[130 rows x 39 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a595229e-64df-4294-8624-4e39e694573e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>29</th>\n",
              "      <th>30</th>\n",
              "      <th>31</th>\n",
              "      <th>32</th>\n",
              "      <th>33</th>\n",
              "      <th>34</th>\n",
              "      <th>35</th>\n",
              "      <th>label</th>\n",
              "      <th>def</th>\n",
              "      <th>cement</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.218866</td>\n",
              "      <td>-1.788849</td>\n",
              "      <td>-1.272567</td>\n",
              "      <td>1.286013</td>\n",
              "      <td>-0.025384</td>\n",
              "      <td>0.110330</td>\n",
              "      <td>-0.078616</td>\n",
              "      <td>-0.073011</td>\n",
              "      <td>-0.060965</td>\n",
              "      <td>0.020220</td>\n",
              "      <td>...</td>\n",
              "      <td>0.071760</td>\n",
              "      <td>-0.017183</td>\n",
              "      <td>-0.005208</td>\n",
              "      <td>0.031162</td>\n",
              "      <td>0.007222</td>\n",
              "      <td>0.040832</td>\n",
              "      <td>0.021360</td>\n",
              "      <td>CE-E1</td>\n",
              "      <td>E1</td>\n",
              "      <td>CE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.168290</td>\n",
              "      <td>-1.707895</td>\n",
              "      <td>-1.322976</td>\n",
              "      <td>1.308286</td>\n",
              "      <td>0.012410</td>\n",
              "      <td>0.029317</td>\n",
              "      <td>-0.337297</td>\n",
              "      <td>-0.240902</td>\n",
              "      <td>-0.234894</td>\n",
              "      <td>-0.105893</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.037330</td>\n",
              "      <td>0.070267</td>\n",
              "      <td>0.025179</td>\n",
              "      <td>0.026804</td>\n",
              "      <td>-0.034273</td>\n",
              "      <td>0.046095</td>\n",
              "      <td>0.093410</td>\n",
              "      <td>CE-E1</td>\n",
              "      <td>E1</td>\n",
              "      <td>CE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.225657</td>\n",
              "      <td>-1.764387</td>\n",
              "      <td>-1.237795</td>\n",
              "      <td>1.317395</td>\n",
              "      <td>-0.062924</td>\n",
              "      <td>0.095478</td>\n",
              "      <td>-0.104374</td>\n",
              "      <td>-0.090659</td>\n",
              "      <td>-0.122462</td>\n",
              "      <td>-0.068372</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.019397</td>\n",
              "      <td>0.015576</td>\n",
              "      <td>-0.024753</td>\n",
              "      <td>-0.077575</td>\n",
              "      <td>0.004951</td>\n",
              "      <td>-0.063802</td>\n",
              "      <td>-0.052815</td>\n",
              "      <td>CE-E1</td>\n",
              "      <td>E1</td>\n",
              "      <td>CE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.250648</td>\n",
              "      <td>-1.779244</td>\n",
              "      <td>-1.266482</td>\n",
              "      <td>1.304862</td>\n",
              "      <td>-0.009416</td>\n",
              "      <td>0.063917</td>\n",
              "      <td>-0.149459</td>\n",
              "      <td>-0.068594</td>\n",
              "      <td>-0.085247</td>\n",
              "      <td>-0.066582</td>\n",
              "      <td>...</td>\n",
              "      <td>0.026853</td>\n",
              "      <td>-0.024080</td>\n",
              "      <td>0.022302</td>\n",
              "      <td>-0.014098</td>\n",
              "      <td>0.004972</td>\n",
              "      <td>0.003337</td>\n",
              "      <td>0.032484</td>\n",
              "      <td>CE-E1</td>\n",
              "      <td>E1</td>\n",
              "      <td>CE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.150545</td>\n",
              "      <td>-1.692308</td>\n",
              "      <td>-1.127476</td>\n",
              "      <td>1.253241</td>\n",
              "      <td>-0.113124</td>\n",
              "      <td>0.077051</td>\n",
              "      <td>0.052341</td>\n",
              "      <td>0.008866</td>\n",
              "      <td>0.014841</td>\n",
              "      <td>-0.077939</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.018302</td>\n",
              "      <td>-0.070278</td>\n",
              "      <td>-0.029900</td>\n",
              "      <td>-0.112453</td>\n",
              "      <td>0.025672</td>\n",
              "      <td>-0.124504</td>\n",
              "      <td>-0.128077</td>\n",
              "      <td>CE-E1</td>\n",
              "      <td>E1</td>\n",
              "      <td>CE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>-0.243562</td>\n",
              "      <td>-0.172117</td>\n",
              "      <td>0.016343</td>\n",
              "      <td>-0.517160</td>\n",
              "      <td>-0.395717</td>\n",
              "      <td>1.134862</td>\n",
              "      <td>-0.063609</td>\n",
              "      <td>-0.102538</td>\n",
              "      <td>-0.213893</td>\n",
              "      <td>0.407456</td>\n",
              "      <td>...</td>\n",
              "      <td>0.055485</td>\n",
              "      <td>0.024799</td>\n",
              "      <td>-0.005150</td>\n",
              "      <td>0.056961</td>\n",
              "      <td>0.046080</td>\n",
              "      <td>-0.001202</td>\n",
              "      <td>0.028711</td>\n",
              "      <td>NE</td>\n",
              "      <td>NE</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>-0.298643</td>\n",
              "      <td>-0.124896</td>\n",
              "      <td>0.047392</td>\n",
              "      <td>-0.627602</td>\n",
              "      <td>-0.148419</td>\n",
              "      <td>1.168864</td>\n",
              "      <td>0.219554</td>\n",
              "      <td>0.121235</td>\n",
              "      <td>0.003090</td>\n",
              "      <td>0.412120</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.058364</td>\n",
              "      <td>0.168007</td>\n",
              "      <td>0.009866</td>\n",
              "      <td>0.033027</td>\n",
              "      <td>-0.163595</td>\n",
              "      <td>0.057479</td>\n",
              "      <td>0.032558</td>\n",
              "      <td>NE</td>\n",
              "      <td>NE</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>-0.237095</td>\n",
              "      <td>-0.110157</td>\n",
              "      <td>0.169717</td>\n",
              "      <td>-0.472418</td>\n",
              "      <td>-0.356296</td>\n",
              "      <td>0.251117</td>\n",
              "      <td>0.061189</td>\n",
              "      <td>0.012236</td>\n",
              "      <td>-0.005983</td>\n",
              "      <td>0.086856</td>\n",
              "      <td>...</td>\n",
              "      <td>0.113152</td>\n",
              "      <td>0.292894</td>\n",
              "      <td>0.141428</td>\n",
              "      <td>-0.114810</td>\n",
              "      <td>-0.231985</td>\n",
              "      <td>0.073137</td>\n",
              "      <td>0.188849</td>\n",
              "      <td>NE</td>\n",
              "      <td>NE</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>-0.415557</td>\n",
              "      <td>-0.282646</td>\n",
              "      <td>0.054667</td>\n",
              "      <td>-0.699325</td>\n",
              "      <td>-0.327229</td>\n",
              "      <td>1.697663</td>\n",
              "      <td>-0.316652</td>\n",
              "      <td>-0.262862</td>\n",
              "      <td>-0.029602</td>\n",
              "      <td>-0.235446</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.095211</td>\n",
              "      <td>-0.151736</td>\n",
              "      <td>0.018817</td>\n",
              "      <td>-0.090885</td>\n",
              "      <td>0.035314</td>\n",
              "      <td>-0.004027</td>\n",
              "      <td>-0.112302</td>\n",
              "      <td>NE</td>\n",
              "      <td>NE</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>-0.341930</td>\n",
              "      <td>-0.239087</td>\n",
              "      <td>0.069122</td>\n",
              "      <td>-0.634052</td>\n",
              "      <td>-0.296480</td>\n",
              "      <td>1.558553</td>\n",
              "      <td>0.000866</td>\n",
              "      <td>0.017512</td>\n",
              "      <td>0.126786</td>\n",
              "      <td>-0.092473</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.004352</td>\n",
              "      <td>-0.105904</td>\n",
              "      <td>0.055064</td>\n",
              "      <td>0.075327</td>\n",
              "      <td>-0.003278</td>\n",
              "      <td>0.030820</td>\n",
              "      <td>0.028572</td>\n",
              "      <td>NE</td>\n",
              "      <td>NE</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>130 rows × 39 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a595229e-64df-4294-8624-4e39e694573e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a595229e-64df-4294-8624-4e39e694573e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a595229e-64df-4294-8624-4e39e694573e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "df['def']=label_2.values()\n",
        "df['cement']=label_3.values()\n",
        "df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7W6sx7NXpT9u"
      },
      "outputs": [],
      "source": [
        "# fig = px.scatter_3d(\n",
        "#     df, x=0, y=1, z=2, color='label',\n",
        "#     # title=f'Total Explained Variance: {total_var:.2f}%',\n",
        "#     labels={'0': 'PC 1', '1': 'PC 2', '2': 'PC 3'}\n",
        "# )\n",
        "# fig.show()\n",
        "\n",
        "# plt.savefig('plot_labels.png', dpi=400, format='png')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f5WQ6ttdpTiG"
      },
      "outputs": [],
      "source": [
        "# fig = px.scatter_3d(\n",
        "#     df, x=0, y=1, z=2, color='def',\n",
        "#     # title=f'Total Explained Variance: {total_var:.2f}%',\n",
        "#     labels={'0': 'PC 1', '1': 'PC 2', '2': 'PC 3'}\n",
        "# )\n",
        "# fig.show()\n",
        "\n",
        "# plt.savefig('def.png', dpi=400, format='png')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HiRMIDqUq-MT"
      },
      "outputs": [],
      "source": [
        "# fig = px.scatter_3d(\n",
        "#     df, x=0, y=1, z=2, color='cement',\n",
        "#     # title=f'Total Explained Variance: {total_var:.2f}%',\n",
        "#     labels={'0': 'PC 1', '1': 'PC 2', '2': 'PC 3'}\n",
        "# )\n",
        "# fig.show()\n",
        "\n",
        "# plt.savefig('plot_cement.png', dpi=400, format='png')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YxRH5I1mxeF7"
      },
      "source": [
        "## : Scale Feature"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WDOZQnHB3OFp"
      },
      "outputs": [],
      "source": [
        "# from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# # Normalizando PCA\n",
        "# X1_max_min = MinMaxScaler(feature_range=(-1,1))\n",
        "# X1_train = X1_max_min.fit_transform(X_pca)\n",
        "# X1_train\n",
        "\n",
        "# print('Confirmando a normalização:','\\n X1 máximo normalizado: ', X1_train.max(), '\\n X1 minimo normalizado: ',X1_train.min())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8MsKSgmFFAeJ"
      },
      "source": [
        "## List of dictionaries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VGZUlHC2E9hR"
      },
      "outputs": [],
      "source": [
        "\n",
        "param_grid = []\n",
        "\n",
        "param_grid.append(\n",
        "    [\n",
        "     {\n",
        "      \"LRG__alpha\": stats.loguniform(1e-2,1e2),\n",
        "      \"LRG__solver\": [\"auto\"],\n",
        "     }\n",
        "    ]\n",
        ")\n",
        "\n",
        "param_grid.append(\n",
        "    [\n",
        "     {\n",
        "      \"SVC__C\": stats.loguniform(1e-2,1e2),\n",
        "      \"SVC__kernel\": [\"linear\",\"poly\",\"rbf\",\"sigmoid\"],   \n",
        "     }\n",
        "    ]\n",
        ")\n",
        "\n",
        "param_grid.append(\n",
        "    [\n",
        "     {\n",
        "      \"KNN__n_neighbors\": stats.randint(3,40),\n",
        "      \"KNN__weights\": [\"uniform\",\"distance\"],\n",
        "      \"KNN__algorithm\":[\"ball_tree\",\"kd_tree\",\"brute\",\"auto\"],\n",
        "     }\n",
        "    ]\n",
        ")\n",
        "\n",
        "param_grid.append(\n",
        "   [\n",
        "       {\n",
        "           \"DTC__criterion\": [ \"entropy\",\"gini\"],\n",
        "           \"DTC__splitter\": [\"best\",\"random\"],\n",
        "           \"DTC__max_features\": stats.randint(5,40),\n",
        "       }\n",
        "   ]\n",
        "\n",
        ")\n",
        "\n",
        "param_grid.append(\n",
        "    [\n",
        "        {\n",
        "            \"RFC__n_estimators\": stats.randint(2,100),\n",
        "            \"RFC__criterion\": [\"entropy\",\"gini\"],\n",
        "            \"RFC__max_depth\": stats.randint(2,20),\n",
        "            #\"RFC__max_features\": stats.uniform(),\n",
        "        }\n",
        "    ]\n",
        "\n",
        ")\n",
        "\n",
        "param_grid.append(\n",
        "   [\n",
        "       {\n",
        "           \"ABST__n_estimators\":  [10, 50, 100, 400],#stats.randint(1,3e2),\n",
        "           \"ABST__algorithm\": [\"SAMME\",\"SAMME.R\"],\n",
        "           \"ABST__learning_rate\": [0.001, 0.01, 0.1, 1.0],#stats.loguniform(1e-2,3e2),\n",
        "       }\n",
        "   ]\n",
        "\n",
        ")\n",
        "\n",
        "models = []\n",
        "\n",
        "models.append((\"LRG\", RidgeClassifier()))\n",
        "models.append((\"SVC\",SVC()))\n",
        "models.append((\"KNN\", KNeighborsClassifier()))\n",
        "models.append((\"DTC\", DecisionTreeClassifier()))\n",
        "models.append((\"RFC\", RandomForestClassifier()))\n",
        "models.append((\"ABST\",AdaBoostClassifier()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1TuKBqgJFJRB"
      },
      "outputs": [],
      "source": [
        "N_REPS=10#50\n",
        "N_SPLITS=10#5\n",
        "N_ITERS=10#100\n",
        "models_list=['LRG','SVC','KNN','DTC','RFR','ABST']\n",
        "# models_list=['LRG','SVC','KNN','RFR']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kd1_RdeXyioh"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5gF9ZWV8IchH",
        "outputId": "090e1269-559b-40d4-d666-2b0a61397823"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Accuracy Score:  LRG\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Accuracy Score:  SVC\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Accuracy Score:  KNN\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Accuracy Score:  DTC\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Accuracy Score:  RFR\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Fitting 100 folds for each of 10 candidates, totalling 1000 fits\n",
            "Accuracy Score:  ABST\n"
          ]
        }
      ],
      "source": [
        "random_search={}\n",
        "param_grids={}\n",
        "acc1={}\n",
        "dict_acc={}\n",
        "y_true = {}\n",
        "y_pred={}\n",
        "\n",
        "size_test = 0.3\n",
        "size_MonteCarlo = 80\n",
        "size_list = len(models_list)\n",
        "\n",
        "\n",
        "\n",
        "label = np.ravel(label)\n",
        "\n",
        "for k in range(0,size_list):\n",
        "\n",
        "  yh_test = pd.DataFrame()\n",
        "  aux_y_true = pd.DataFrame()\n",
        "  aux_acc = pd.DataFrame()\n",
        "\n",
        "  for i in range(0,size_MonteCarlo):\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X_pca,label,\n",
        "                                                        test_size=size_test,\n",
        "                                                        random_state=i)\n",
        "    rkf = RepeatedKFold(n_splits=N_SPLITS,n_repeats=N_REPS,random_state=i)\n",
        "    clf = Pipeline([(\"scaler\",StandardScaler()), (models[k])])\n",
        "    param_grids = param_grid[k]\n",
        "    random_search = RandomizedSearchCV(clf,verbose=1,\n",
        "                                       scoring=\"accuracy\",\n",
        "                                       param_distributions=param_grids,\n",
        "                                       n_iter=N_ITERS,\n",
        "                                       n_jobs=-1,\n",
        "                                       cv=rkf,\n",
        "                                       random_state=42)\n",
        "      \n",
        "\n",
        "    random_search.fit(X_train,y_train)\n",
        "    yh_test[i] = random_search.predict(X_test)\n",
        "    aux_acc.loc[0,i] = random_search.score(X_test, y_test)\n",
        "    aux_y_true[i] = y_test\n",
        "  y_true[models_list[k]] = aux_y_true\n",
        "  y_pred[models_list[k]] = yh_test\n",
        "  acc1[models_list[k]] = aux_acc\n",
        "  dict_acc[models_list[k]] = aux_acc.values.ravel()\n",
        "  # print('Accuracy Score: ',models_list[k], ' Accuracy: ', acc1[models_list[k]])\n",
        "  print('Accuracy Score: ',models_list[k])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CLdSwMP_nCcx"
      },
      "outputs": [],
      "source": [
        "# y_true['DTC'][0]\n",
        "# acc1['KNN'].idxmax(axis=1).values[0]\n",
        "# y_true\n",
        "# acc1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V897JJAT64nx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 884
        },
        "outputId": "6aa84154-301f-41d1-ce45-81d386a4fede"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x1080 with 12 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "list_label = pd.unique(label)\n",
        "matrix_conf = {}\n",
        "\n",
        "fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(20,15))\n",
        "axes = axes.ravel()\n",
        "alphabet = ['(a) ','(b) ','(c) ','(d) ','(e) ', '(f) ']\n",
        "for k in range(0,size_list):\n",
        "  i = list(models_list)[k]\n",
        "  j = list(alphabet)[k]\n",
        "  max_index = acc1[models_list[k]].idxmax(axis=1).values[0]\n",
        "  matrix_conf[k] = confusion_matrix(y_true[models_list[k]][max_index], y_pred[models_list[k]][max_index], labels=list_label,normalize='true')\n",
        "  cm= sns.heatmap(matrix_conf[k], annot=True, xticklabels=list_label, yticklabels=list_label, ax=axes[k],cmap='Blues')\n",
        "  axes[k].set_title(j+i,fontsize=20)\n",
        "  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BpT8w2Qx_dW_"
      },
      "outputs": [],
      "source": [
        "# acc1\n",
        "# yh_test\n",
        "# dict_pred"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dLIdChCbRqMR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "outputId": "0914cadb-b5a7-4616-9489-4b14c8c0854a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "acc_plot = pd.DataFrame.from_dict(dict_acc, orient='index')\n",
        "ax = sns.boxplot(data=acc_plot.T)\n",
        "# ax = sns.swarmplot(data=acc_plot.T, color=\".25\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "w1LFONdZWVg5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "outputId": "8a9ece10-868f-4aa7-9094-4685ac3fac7f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 11.2% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
            "  warnings.warn(msg, UserWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 13.8% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
            "  warnings.warn(msg, UserWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 15.0% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
            "  warnings.warn(msg, UserWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 23.8% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
            "  warnings.warn(msg, UserWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 6.2% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
            "  warnings.warn(msg, UserWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "ax = sns.swarmplot(data=acc_plot.T)\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Isabel_Tiago_Proj.ipynb",
      "provenance": []
    },
    "interpreter": {
      "hash": "ac59ebe37160ed0dfa835113d9b8498d9f09ceb179beaac4002f036b9467c963"
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}